import React, { useState, useEffect } from 'react';
import axios from 'axios';
import { useNavigate } from 'react-router-dom';
import './Setting.css';
import Delete from './Delete'; // Import the modal component

const Setting = () => {
  const [userData, setUserData] = useState({
    _id: '',
    name: '',
    email: '',
    phone: '',
  });

  const [originalEmail, setOriginalEmail] = useState('');
  const [error, setError] = useState('');
  const [successMessage, setSuccessMessage] = useState('');
  const [showDeleteModal, setShowDeleteModal] = useState(false); // State for modal
  const navigate = useNavigate();

  useEffect(() => {
    const token = localStorage.getItem('authToken');

    if (!token) {
      console.log('No token found, please log in');
      navigate('/login');
      return;
    }

    axios
      .get('http://localhost:4000/api/user', {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then((response) => {
        if (response.data.user) {
          setUserData({ ...response.data.user, _id: response.data.user._id });
          setOriginalEmail(response.data.user.email);
        } else {
          console.log('Error fetching user data');
        }
      })
      .catch((error) => {
        console.error('Error fetching user data:', error);
        setError('Failed to fetch user data.');
      });
  }, [navigate]);

  const handleDeleteAccount = () => {
    const token = localStorage.getItem('authToken');
    if (!token) {
      console.log('No token found, cannot delete account');
      return;
    }

    axios
      .delete(`http://localhost:4000/api/user/${userData._id}`, {
        headers: { Authorization: `Bearer ${token}` },
      })
      .then(() => {
        console.log('Account deleted successfully');
        localStorage.removeItem('authToken');
        navigate('/');
      })
      .catch((error) => {
        console.error('Error deleting account:', error);
        setError('Failed to delete account.');
      });
  };

  return (
    <div className="setting-container">
      <form className="setting-form">
        <div className="setting-field">
          <label className="setting-label">Name</label>
          <input
            className="setting-input"
            type="text"
            placeholder="Rahul Singh"
            value={userData.name}
            onChange={(e) => setUserData({ ...userData, name: e.target.value })}
          />
        </div>
        <div className="setting-field">
          <label className="setting-label">Email id</label>
          <input
            className="setting-input"
            type="email"
            placeholder="rahulsingh@gmail.com"
            value={userData.email}
            onChange={(e) => setUserData({ ...userData, email: e.target.value })}
          />
        </div>
        <div className="setting-field">
          <label className="setting-label">Mobile no.</label>
          <input
            className="setting-input"
            type="text"
            placeholder="1234567890"
            value={userData.phone}
            onChange={(e) => setUserData({ ...userData, phone: e.target.value })}
          />
        </div>
        <button type="button" className="save-button">
          Save Changes
        </button>
        <div className="delete-button-part">
          <button
            type="button"
            className="delete-button"
            onClick={() => setShowDeleteModal(true)} // Open modal
          >
            Delete Account
          </button>
        </div>
      </form>

      {successMessage && <div className="success-message">{successMessage}</div>}
      {error && <div className="error-message">{error}</div>}

      {/* Delete Modal */}
      {showDeleteModal && (
        <Delete
          onClose={() => setShowDeleteModal(false)}
          onConfirm={handleDeleteAccount}
        />
      )}
    </div>
  );
};

export default Setting;
